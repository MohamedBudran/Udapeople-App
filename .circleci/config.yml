version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  notify_at_failure:
    steps:
      - slack/notify:
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1
  
  install_ansible:
    description: install ansible
    steps:
      - run:
          name: install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
      

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
                          #Udapeople-App-BE-${CIRCLE_WORKFLOW_ID:0:7}

          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name Udapeople-App-BE-<<parameters.workflow_id>>
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force
            aws cloudformation delete-stack --stack-name Udapeople-App-FE-<<parameters.workflow_id>> 

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi

            
jobs:
  build-frontend: #job name
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout                 #Built-in step at circleci to check source code
      - restore_cache:
          keys: [frontend-build]
      - run:                     #key enables addition of arbitrary, multi-line shell command scripting
          name: Build front-end
          command: |
             cd frontend
             npm install 
             npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_at_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install 
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_at_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout                 #Built-in step at circleci to check source code
      - restore_cache:
          keys: [frontend-build]
      - run:                     #key enables addition of arbitrary, multi-line shell command scripting
          name: test front-end
          command: |
             cd frontend
             npm install 
             npm test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test Back-end 
          command: |
             cd backend
             npm install 
             npm test 
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout                 #Built-in step at circleci to check source code
      - restore_cache:
          keys: [frontend-build]
      - run:                     #key enables addition of arbitrary, multi-line shell command scripting
          name: scan front-end
          command: |
             cd frontend
             npm install 
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan Back-end 
          command: |
             cd backend
             npm install 
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople-App \
              --stack-name "Udapeople-App-BE-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople-App \
              --stack-name "Udapeople-App-FE-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt   
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment


  configure-infrastructure:
    docker:
      - image: cimg/aws:2022.06 
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["a7:ee:42:9a:9a:f5:5a:09:4e:1f:0c:94:64:ec:f4:fa"]
      
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #     ##
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment     

  # run-migrations:
  #   docker:
  #     # Docker image here that supports NodeJS
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Run migrations
  #         command: |
  #           # Your code here
  #           exit 1
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           # Your code here
  #           exit 1
     # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]