version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  notify_at_failure:
    steps:
      - slack/notify:
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1
  
  install_ansible:
    description: install ansible
    steps:
      - run:
          name: install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs13:
    description: install nodejs13
    steps:
      - run:
          name: install nodejs13
          command: |
            curl -O https://nodejs.org/download/release/v13.14.0/node-v13.14.0-linux-x64.tar.gz
            sudo tar -xzf node-v13.14.0-linux-x64.tar.gz -C /opt
            echo "export PATH=/opt/node-v13.14.0-linux-x64/bin:$PATH" | sudo tee -a /etc/profile
            sudo ln -s /opt/node-v13.14.0-linux-x64/bin/npm /usr/bin/npm
            sudo ln -s /opt/node-v13.14.0-linux-x64/bin/node /usr/bin/node
    # sudo ln -s /opt/node-v13.14.0-linux-x64/bin/npm /usr/bin/npm
    # sudo ln -s /opt/node-v13.14.0-linux-x64/bin/node /usr/bin/node
    # sudo ln -s /opt/node-v13.14.0-linux-x64/bin/npx /usr/bin/npx
  install_awscli:
      description: Install AWS CLI 
      steps:
        - run:
            name: Install AWS CLI 
            command: |  
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
      

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
                          #Udapeople-App-BE-${CIRCLE_WORKFLOW_ID:0:7}

          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name Udapeople-App-BE-<<parameters.workflow_id>>
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force
            aws cloudformation delete-stack --stack-name Udapeople-App-FE-<<parameters.workflow_id>> 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here 
      workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${kvdb_bucket}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migration:revert
            fi

            
jobs:
  build-frontend: #job name
    docker:
      - image: circleci/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout                 #Built-in step at circleci to check source code
      - restore_cache:
          keys: [frontend-build]
      - run:                     #key enables addition of arbitrary, multi-line shell command scripting
          name: Build front-end
          command: |
             cd frontend
             npm install 
             npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_at_failure

  build-backend:
    docker:
      # - image: cimg/base:stable
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - install_nodejs13
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install 
             npm run build 
      - save_cache:
          paths:
           - ./backend/node_modules
          key: backend-build
      - run:
          name: Compiled code will be retrieved by deploy-backend.yml 
          command: |
            mkdir /tmp/workspace/
            cp ./backend/package.json /tmp/workspace/
            cd backend/dist
            tar -zcvf /tmp/workspace/backend.tar.gz ./
            tar -zcvf ./../../backend.tar.gz ./
      - persist_to_workspace:                    # added 
          root: /tmp/workspace
          # root: ~/
          paths:
            # - project/backend/dist
            - package.json
            - backend.tar.gz
      - notify_at_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout                 #Built-in step at circleci to check source code
      - restore_cache:
          keys: [frontend-build]
      - run:                     #key enables addition of arbitrary, multi-line shell command scripting
          name: test front-end
          command: |
             cd frontend
             npm run test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test Back-end 
          command: |
             cd backend
             npm i
             npm run test           
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout                 #Built-in step at circleci to check source code
      - restore_cache:
          keys: [frontend-build]
      - run:                     #key enables addition of arbitrary, multi-line shell command scripting
          name: scan front-end
          command: |
             cd frontend
             npm install 
             npm audit fix --audit-level=critical
    # npm audit fix --force --audit-level=critical
  scan-backend:
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan Back-end 
          command: |
             cd backend
             npm install 
             npm audit fix --audit-level=critical
    #  npm audit fix --force --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: python:3.7-alpine
      #- image: cimg/aws:2022.06
    steps:
      - checkout
      - run:                                           #added
          name: Install dependencies
          command: |
              apk add --update tar gzip curl
              pip install awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople-App \
              --stack-name "Udapeople-App-BE-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople-App \
              --stack-name "Udapeople-App-FE-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt   
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine
        environment:
          ANSIBLE_HOST_KEY_CHECKING: "no"
      #- image: cimg/aws:2022.06 
    steps:
      - checkout
      #- install_ansible
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["a7:ee:42:9a:9a:f5:5a:09:4e:1f:0c:94:64:ec:f4:fa"]
      
      - run:
          name: Install config dependencies
          command: |
              apk add --update tar gzip curl nodejs npm ansible zip
              cat .circleci/ansible/inventory.txt
              pip install awscli
      
      
      # - run:
      #     name: Install dependencies
      #     command: |
      #     ##
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment     

  run-migrations:
    docker:
      # - image: cimg/node:13.8.0
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - install_nodejs13
      # - install_awscli
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install typescript
            npm run migrations > migration_FILE.txt
            cat migration_FILE.txt  
    #              npm install typescript
#  npm cache clean --force
#             rm -rf node_modules
#             rm package-lock.json
      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       # Your code here
      #       exit 1
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migration_FILE.txt
            then
              curl https://kvdb.io/${kvdb_bucket}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
              echo "migration complete -------"
            else                                     
                echo "no migration happened"
            fi
      - destroy-environment
      - revert-migrations    

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs13
      - restore_cache:
         keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_AWS_PUBLIC_IP}:3030"
            echo "${API_URL}"
            echo "API_URL=http://${BACKEND_AWS_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure 
      - destroy-environment
      - revert-migrations      
           
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ['44:c6:5c:d8:10:3f:05:b1:c3:c1:b8:9e:92:75:23:f8']
      # attach workspace
      - attach_workspace:
          at: ~/
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          key: backend-build
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible openssh-client tar gzip curl nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 20m
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - revert-migrations
      - destroy-environment 

  smoke-test:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - install_ansible
      - install_nodejs13
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Get backend url
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_AWS_PUBLIC_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi   
      # - run:
      #     name: Backend smoke test.
      #     command: |
      #       # your code here
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations   
      

  cloudfront-update:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: save old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/${kvdb_bucket}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack
      - destroy-environment
      - revert-migrations   

  cleanup:
      docker:
        - image: cimg/aws:2022.06
      steps:
        - checkout
        # - run:
        #     name: Get old stack workflow id
        #     command: |
        #       # your code here
        #       export OldWorkflowID="the id here"
        #       export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              export STACKS=($(aws cloudformation list-stacks \
                  --query "StackSummaries[*].StackName" \
                  --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"
              export OldWorkflowID=$(curl --insecure https://kvdb.io/${kvdb_bucket}/old_workflow_id)
              echo Old Workflow ID: $OldWorkflowID 
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]