version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  notify_at_failure:
    steps:
      - slack/notify:
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1
  
  install_ansible:
    description: install ansible
    steps:
      - run:
          name: install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs13:
    description: install nodejs13
    steps:
      - run:
          name: install nodejs13
          command: |
            curl -O https://nodejs.org/download/release/v13.14.0/node-v13.14.0-linux-x64.tar.gz
            tar -xzf node-v13.14.0-linux-x64.tar.gz
            sudo mv node-v13.14.0-linux-x64 /opt/
            sudo ln -s /opt/node-v13.14.0-linux-x64/bin/npm /usr/bin/npm
            sudo ln -s /opt/node-v13.14.0-linux-x64/bin/node /usr/bin/node
            sudo ln -s /opt/node-v13.14.0-linux-x64/bin/npx /usr/bin/npx
  install_awscli:
      description: Install AWS CLI 
      steps:
        - run:
            name: Install AWS CLI 
            command: |  
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
      

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
                          #Udapeople-App-BE-${CIRCLE_WORKFLOW_ID:0:7}

          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name Udapeople-App-BE-<<parameters.workflow_id>>
            aws s3 rb s3://udapeople-<<parameters.workflow_id>> --force
            aws cloudformation delete-stack --stack-name Udapeople-App-FE-<<parameters.workflow_id>> 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here 
      workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${kvdb_bucket}/migration_${CIRCLE_WORKFLOW_ID:0:7}
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

            
jobs:
  build-frontend: #job name
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout                 #Built-in step at circleci to check source code
      - restore_cache:
          keys: [frontend-build]
      - run:                     #key enables addition of arbitrary, multi-line shell command scripting
          name: Build front-end
          command: |
             cd frontend
             npm install 
             npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_at_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install 
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - persist_to_workspace:                    # added 
          root: ~/
          paths:
              - project/backend/dist
      - notify_at_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout                 #Built-in step at circleci to check source code
      - restore_cache:
          keys: [frontend-build]
      - run:                     #key enables addition of arbitrary, multi-line shell command scripting
          name: test front-end
          command: |
             cd frontend
             npm install 
             npm test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test Back-end 
          command: |
             cd backend
             npm install 
             npm test           
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout                 #Built-in step at circleci to check source code
      - restore_cache:
          keys: [frontend-build]
      - run:                     #key enables addition of arbitrary, multi-line shell command scripting
          name: scan front-end
          command: |
             cd frontend
             npm install 
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: cimg/node:13.8.0  # executer docker image,you can use windows,mac,linux
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan Back-end 
          command: |
             cd backend
             npm install 
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: python:3.7-alpine
      #- image: cimg/aws:2022.06
    steps:
      - checkout
      - run:                                           #added
          name: Install dependencies
          command: |
              apk add --update tar gzip curl
              pip install awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople-App \
              --stack-name "Udapeople-App-BE-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople-App \
              --stack-name "Udapeople-App-FE-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt   
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine
        environment:
          ANSIBLE_HOST_KEY_CHECKING: "no"
      #- image: cimg/aws:2022.06 
    steps:
      - checkout
      #- install_ansible
      - run:
          name: Install config dependencies
          command: |
              apk add --update tar gzip curl nodejs npm ansible zip
              pip install awscli
      - add_ssh_keys:
          fingerprints: ["a7:ee:42:9a:9a:f5:5a:09:4e:1f:0c:94:64:ec:f4:fa"]
      
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #     ##
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment     

  run-migrations:
    docker:
      # - image: cimg/node:13.8.0
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - install_nodejs13
      # - install_awscli
      # - restore_cache:
      #     keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install typescript
            npm run migrations > migration_FILE.txt
            cat migration_FILE.txt  
    #              npm install typescript
#  npm cache clean --force
#             rm -rf node_modules
#             rm package-lock.json
      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       # Your code here
      #       exit 1
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migration_FILE.txt
            then
              curl https://kvdb.io/${kvdb_bucket}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '3'
              echo "migration complete -------"
            else                                     
                echo "no migration happened"
            fi
      - destroy-environment
      - revert-migrations    

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs13
      - restore_cache:
         keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure 
      - destroy-environment
      - revert-migrations      
           
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs13
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["a7:ee:42:9a:9a:f5:5a:09:4e:1f:0c:94:64:ec:f4:fa"]
      - attach_workspace:
         at: ~/   
      - restore_cache:
         keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: package backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml 
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations        
  smoke-test:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - install_ansible
      - install_nodejs13
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Get backend url
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_AWS_PUBLIC_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi   
      # - run:
      #     name: Backend smoke test.
      #     command: |
      #       # your code here
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations   
      

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]